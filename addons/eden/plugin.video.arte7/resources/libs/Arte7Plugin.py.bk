# -*- coding: utf-8 -*-
import os, re, sys
import xbmc, xbmcgui, xbmcplugin, xbmcaddon
import urllib2, xml.dom.minidom, string
from traceback import print_exc

# Custom modules
import SimpleDownloader as downloader
from parsers import PlusParser, LiveParser, EventParser, BonusParser
from Utils import _addLink, _parse_params, verifrep, _add_sort_methods, _end_of_directory, _addDir, _create_param_url, _add_to_index, strip_html

# Recuperation des constantes
__plugin__       = sys.modules[ "__main__" ].__plugin__
__addonID__      = sys.modules[ "__main__" ].__addonID__
__author__       = sys.modules[ "__main__" ].__author__
__platform__     = sys.modules[ "__main__" ].__platform__
__date__         = sys.modules[ "__main__" ].__date__
__version__      = sys.modules[ "__main__" ].__version__
__addon__        = sys.modules[ "__main__" ].__addon__
__settings__     = sys.modules[ "__main__" ].__settings__
__language__     = sys.modules[ "__main__" ].__language__
__addonDir__     = sys.modules[ "__main__" ].__addonDir__

class Arte7Plugin: 
    
    ADDON_DATA         = xbmc.translatePath( "special://profile/addon_data/%s/" % __addonID__ )
    DOWNLOADDIR        = os.path.join( ADDON_DATA, "downloads")
    
    # define param key names
    PARAM_DOWNLOAD_VIDEO              = "dlvideo"
    PARAM_PLAY_VIDEO                  = "playvideo"
    PARAM_VIDEO_ID                    = "video_id"
    PARAM_VIDEO_NAME                  = "video_name"
    PARAM_ARTE_PLUS                   = "arte_plus"
    PARAM_ARTE_LIVE                   = "arte_live"
    PARAM_CATEGORIE_ARTE_LIVE         = "arte_live_categorie"
    """
    PARAM_CATEGORIE_ARTE_LIVE_KEY     = "arte_live_categorie_key"	
    PARAM_CATEGORIE_ARTE_LIVE_VALUE   = "arte_live_categorie_value"
    """
    PARAM_ARTE_EVENT                  = "arte_event"
    PARAM_CATEGORIE_ARTE_EVENT        = "arte_event_categorie"
    """
    PARAM_CATEGORIE_ARTE_EVENT_KEY    = "arte_event_categorie_key"	
    PARAM_CATEGORIE_ARTE_EVENT_VALUE  = "arte_event_categorie_value"
    """
    PARAM_ARTE_BONUS                  = "arte_bonus"
    PARAM_CATEGORIE_ARTE_BONUS        = "arte_bonus_categorie"
    """
    PARAM_CATEGORIE_ARTE_BONUS_KEY    = "arte_bonus_categorie_key"	
    PARAM_CATEGORIE_ARTE_BONUS_VALUE  = "arte_bonus_categorie_value"
    """
    PARAM_NEXT_PAGE                   = "arte_next_page"
    PARAM_NEXT_PAGE_NUMBER            = "arte_next_page_number"
    PARAM_ARTE_CATEGORIE              = "arte_categorie"
    PARAM_ARTE_CATEGORIE_KEY          = "arte_categorie_key"
    PARAM_ARTE_CATEGORIE_VALUE        = "arte_categorie_value"
    #verification du dossier de téléchargement
    dl_dir = __settings__.getSetting( 'downloadPath' )
    if dl_dir != "":
	DOWNLOADDIR = dl_dir
    dirCheckList = ( DOWNLOADDIR )
	
    #récupération des données pour pagination
    pluginhandle = int(sys.argv[1])
    numbers=["10","25","50","100",]
    NB_VIDEOS_PER_PAGE=numbers[int(__settings__.getSetting("nbVideoPerPage"))]
    PAGE_NUMBER = 1
    NEXT_PAGE_NUMBER = None
    
    ARTE_CATEGORIE = None

    VIDEOS_PLUS        = []
    VIDEOS_LIVE        = []
    VIDEOS_EVENT       = []
    VIDEOS_BONUS       = []
    CATEGORIES_LIVE    = {}
    CATEGORIES_EVENT   = {}
    CATEGORIES_BONUS   = {}

    def __init__( self, *args, **kwargs ):
        print "================================"
        print "Arte7 - DEMARRAGE"

        self.parameters = _parse_params()
	if self.PARAM_ARTE_CATEGORIE in self.parameters.keys():
            self.ARTE_CATEGORIE = self.parameters[self.PARAM_ARTE_CATEGORIE]

        lang_id = int( __settings__.getSetting( 'vid_language' ) )
        lang    = ["fr","de"][lang_id]

        self.liveParser  = LiveParser(lang, self.CATEGORIES_LIVE)
        self.plusParser  = PlusParser(lang, self.VIDEOS_PLUS)
        self.eventParser = EventParser(lang, self.CATEGORIES_EVENT, self.VIDEOS_EVENT)
	self.bonusParser = BonusParser(lang, self.CATEGORIES_BONUS, self.VIDEOS_BONUS)
        self.select()

    def select( self ):
        try:
            if len(self.parameters) < 1:
                #initialisation
                self.show_menu()

            elif self.PARAM_ARTE_PLUS in self.parameters.keys():
                #on liste les videos une page contenant au max 200 vidéos
                self.plusParser.parse(1, 200)
                self.ARTE_CATEGORIE = self.PARAM_ARTE_PLUS
                self.show_videos(self.VIDEOS_PLUS)

            elif self.PARAM_ARTE_LIVE in self.parameters.keys():
                #on liste les categories arte live
                self.liveParser.get_categories_list()
                self.show_categories(self.CATEGORIES_LIVE, self.PARAM_CATEGORIE_ARTE_LIVE)
            
            elif self.PARAM_CATEGORIE_ARTE_LIVE in self.parameters.keys():
                #on liste les videos arte live
                key = self.parameters[self.PARAM_ARTE_CATEGORIE_KEY].replace('brinbrin','&')
                value = self.parameters[self.PARAM_ARTE_CATEGORIE_VALUE]
                self.liveParser.get_videos_list(key, self.VIDEOS_LIVE)
                self.ARTE_CATEGORIE = self.PARAM_ARTE_LIVE
                self.show_videos(self.VIDEOS_LIVE)    

            elif self.PARAM_ARTE_EVENT in self.parameters.keys():
                #on liste les categories arte event
                self.eventParser.get_categories_list()
                self.show_categories(self.CATEGORIES_EVENT, self.PARAM_CATEGORIE_ARTE_EVENT)

            elif self.PARAM_CATEGORIE_ARTE_EVENT in self.parameters.keys():
                #on liste les videos arte event
                key = self.parameters[self.PARAM_ARTE_CATEGORIE_KEY].replace('brinbrin','&')
                value = self.parameters[self.PARAM_ARTE_CATEGORIE_VALUE]
                self.NEXT_PAGE_NUMBER = self.eventParser.parse(value, self.PAGE_NUMBER, self.NB_VIDEOS_PER_PAGE)
                self.ARTE_CATEGORIE = self.PARAM_ARTE_EVENT
                self.show_videos(self.VIDEOS_EVENT)

            elif self.PARAM_ARTE_BONUS in self.parameters.keys():
                #on liste les categories arte bonus
                self.bonusParser.get_categories_list()
                self.show_categories(self.CATEGORIES_BONUS, self.PARAM_CATEGORIE_ARTE_BONUS)

            elif self.PARAM_CATEGORIE_ARTE_BONUS in self.parameters.keys():
                #on liste les videos arte event
                key = self.parameters[self.PARAM_ARTE_CATEGORIE_KEY].replace('brinbrin','&')
                value = self.parameters[self.PARAM_ARTE_CATEGORIE_VALUE]
                self.NEXT_PAGE_NUMBER = self.bonusParser.parse(value, self.PAGE_NUMBER, self.NB_VIDEOS_PER_PAGE)
                self.ARTE_CATEGORIE = self.PARAM_ARTE_BONUS
                self.show_videos(self.VIDEOS_BONUS)
	    
            elif self.PARAM_NEXT_PAGE in self.parameters.keys():
                #en cas de passage a la page suivante
                self.PAGE_NUMBER = self.parameters[self.PARAM_NEXT_PAGE_NUMBER]

		if self.ARTE_CATEGORIE == self.PARAM_ARTE_EVENT:
                	self.NEXT_PAGE_NUMBER = self.eventParser.parse(value, self.PAGE_NUMBER, self.NB_VIDEOS_PER_PAGE)
		elif self.ARTE_CATEGORIE == self.PARAM_ARTE_BONUS:
                	self.NEXT_PAGE_NUMBER = self.bonusParser.parse(value, self.PAGE_NUMBER, self.NB_VIDEOS_PER_PAGE)
                value = self.parameters[self.PARAM_ARTE_CATEGORIE_VALUE]

                self.show_videos(self.VIDEOS_EVENT)
		
            elif self.PARAM_PLAY_VIDEO in self.parameters.keys():
                # On lance la video               
                hd = self.retrieveVideoLink()
                if hd is None:
                	xbmc.executebuiltin("XBMC.Notification(%s,%s)"%( __language__( 30300 ) , __language__( 30301 ) ))  
                else:
		    if self.ARTE_CATEGORIE == self.PARAM_ARTE_LIVE:
			hd, downloadParams = self.liveParser.decode_link(hd) 
				
		    item = xbmcgui.ListItem(path=hd)
		    xbmcplugin.setResolvedUrl(handle=int(sys.argv[1]), succeeded=True, listitem=item)

                _end_of_directory( True )
                
            elif self.PARAM_DOWNLOAD_VIDEO in self.parameters.keys():
                # On telecharge la video
                video = {}
                
                name = self.parameters[self.PARAM_VIDEO_NAME]
               	hd = self.retrieveVideoLink()

                if hd is None:
                	xbmc.executebuiltin("XBMC.Notification(%s,%s)"%( __language__( 30300 ) , __language__( 30301 ) ))  
                else:			
                	video[self.PARAM_VIDEO_ID] = hd
                	video[self.PARAM_VIDEO_NAME] = name

                	self.downloadVideo(video)
					
                _end_of_directory( True )					

        except Exception,msg:
            xbmc.executebuiltin("XBMC.Notification(%s,%s)"%("ERROR select",msg)) 
            print ("Error select")
            print_exc()
            _end_of_directory( False )
 
    def show_menu(self):
        ok = True

        """ ARTE PLUS """
        _add_to_index(context = self.PARAM_ARTE_PLUS, name = __language__ ( 30003 ) )

        """ ARTE EVENTS """
        _add_to_index(context = self.PARAM_ARTE_EVENT, name = __language__ ( 30005 ) )

        """ ARTE BONUS """
        _add_to_index(context = self.PARAM_ARTE_BONUS, name = __language__ ( 30006 ) )

        """ ARTE LIVE """	
        _add_to_index(context = self.PARAM_ARTE_LIVE, name = __language__ ( 30004 ) )
		
        _end_of_directory( True )

        return ok

    def show_categories(self, categorie, categorie_id):
        ok = True
		
        for key,value in self.categorie.items(): 
            paramsAddons = {}
            paramsAddons[categorie_id]  = "True"
            paramsAddons[self.PARAM_ARTE_CATEGORIE_KEY]  = key.replace('&','brinbrin')
            paramsAddons[self.PARAM_ARTE_CATEGORIE_VALUE]  = value
		
            url = _create_param_url( paramsAddons )	
            name = key.encode('utf-8')
            _addDir( name=name, url=url )

        _end_of_directory( True )

    """
    def show_live_categories(self):
        ok = True
		
        for key,value in self.CATEGORIES_LIVE.items(): 
            paramsAddons = {}
            paramsAddons[self.PARAM_CATEGORIE_ARTE_LIVE]  = "True"
            paramsAddons[self.PARAM_CATEGORIE_ARTE_LIVE_KEY]  = key.replace('&','brinbrin')
            paramsAddons[self.PARAM_CATEGORIE_ARTE_LIVE_VALUE]  = value
		
            url = _create_param_url( paramsAddons )	
            name = key.encode('utf-8')
            _addDir( name=name, url=url )

        _end_of_directory( True )

        return ok

    def show_event_categories(self):
        ok = True
        for key,value in self.CATEGORIES_EVENT.items(): 
            paramsAddons = {}
            paramsAddons[self.PARAM_CATEGORIE_ARTE_EVENT]  = "True"
            paramsAddons[self.PARAM_CATEGORIE_ARTE_EVENT_KEY]  = key.replace('&','brinbrin')
            paramsAddons[self.PARAM_CATEGORIE_ARTE_EVENT_VALUE]  = value
		
            url = _create_param_url( paramsAddons )	
            name = key.encode('utf-8')
            _addDir( name=name, url=url )

        _end_of_directory( True )

        return ok
    """
    def show_videos(self, videos): 
        ok = True
                 
        for video in videos:
            name = video.date + " - " + video.title
            if video.summary is None:
                summary = video.pitch
            else:
                summary = video.summary

            infoLabels={ "Title": strip_html(video.title), 
                         "Overlay": "", 
                         "Size": "", 
                         "Year": "", 
                         "Plot": strip_html(summary), 
                         "PlotOutline": video.orig, 
                         "MPAA": "", 
                         "Genre": "",
                         "Studio": "", 
                         "Director": video.author, 
                         "Duration": video.duration,
                         "Cast": "",
                         "Date": video.date }
		
            c_items = self.createVideoContextMenu(video)
            paramsAddons = self.createParamsAddons(self.PARAM_PLAY_VIDEO, video)
            url = _create_param_url( paramsAddons )
            _addLink( name=name, url=url, iconimage=video.pix, itemInfoLabels=infoLabels, c_items=c_items )
	
        if self.NEXT_PAGE_NUMBER :
            paramsAddons = {}
            paramsAddons[self.PARAM_NEXT_PAGE]  = "True"
            paramsAddons[self.PARAM_NEXT_PAGE_NUMBER]  = self.NEXT_PAGE_NUMBER
            paramsAddons[self.PARAM_ARTE_CATEGORIE_VALUE] = self.parameters[self.PARAM_ARTE_CATEGORIE_VALUE]
		
            url = _create_param_url( paramsAddons )	
            name = __language__(30302)+" ("+self.NEXT_PAGE_NUMBER+")"
            _addDir( name=name, url=url )
                
        _end_of_directory( True )

        return ok

    def retrieveVideoLink(self):
        hd = None

        link = self.parameters[self.PARAM_VIDEO_ID]
        if self.ARTE_CATEGORIE == self.PARAM_ARTE_EVENT:
            hd, sd = self.eventParser.fetch_stream_links( link )

	elif self.ARTE_CATEGORIE == self.PARAM_ARTE_BONUS:
            hd, sd = self.bonusParser.fetch_stream_links( link )
			
        elif self.ARTE_CATEGORIE == self.PARAM_ARTE_PLUS:
            hd, sd = self.plusParser.fetch_stream_links( link )

        elif self.ARTE_CATEGORIE == self.PARAM_ARTE_LIVE:
            links = self.liveParser.get_links(link)
            if links['Live'] is not None:
                #hd = links['Live']
                hd = None
            elif links['HD'] is not None :
                hd = links['HD']
            else :
                hd = links['SD']
        return hd

    def createParamsAddons(self, menuName, video ):
        paramsAddons = {}
        paramsAddons[menuName]  = "True"

        if self.ARTE_CATEGORIE == self.PARAM_ARTE_EVENT:
            paramsAddons[self.PARAM_ARTE_CATEGORIE] = self.PARAM_ARTE_EVENT
            paramsAddons[self.PARAM_VIDEO_ID]       = video.link

	elif self.ARTE_CATEGORIE == self.PARAM_ARTE_BONUS:
            paramsAddons[self.PARAM_ARTE_CATEGORIE] = self.PARAM_ARTE_BONUS
            paramsAddons[self.PARAM_VIDEO_ID]       = video.link

        elif self.ARTE_CATEGORIE == self.PARAM_ARTE_PLUS:
            paramsAddons[self.PARAM_ARTE_CATEGORIE] = self.PARAM_ARTE_PLUS
            paramsAddons[self.PARAM_VIDEO_ID]       = video.link

        elif self.ARTE_CATEGORIE == self.PARAM_ARTE_LIVE:
            paramsAddons[self.PARAM_ARTE_CATEGORIE] = self.PARAM_ARTE_LIVE
            paramsAddons[self.PARAM_VIDEO_ID]       = str(video.order)

        paramsAddons[self.PARAM_VIDEO_NAME] = strip_html(video.title)
		
        return paramsAddons
		
    def createVideoContextMenu(self, video):
        cm = []
		
		#Information
        cm.append( ( __language__(30103), "XBMC.Action(Info)" ) )

		#Téléchargement
        paramsAddonsContextMenu = self.createParamsAddons(self.PARAM_DOWNLOAD_VIDEO, video)
        url = _create_param_url( paramsAddonsContextMenu ) 		
        cm.append( ( __language__(30102) , "XBMC.PlayMedia(%s)" % (url)))
		
        return cm

    def downloadVideo(self, video):
        ok = True
	
        my_downloader = downloader.SimpleDownloader()
        try:
            if my_downloader.isRTMPInstalled():
                url= video[self.PARAM_VIDEO_ID]
                if self.ARTE_CATEGORIE == self.PARAM_ARTE_EVENT or self.ARTE_CATEGORIE == self.PARAM_ARTE_PLUS or self.ARTE_CATEGORIE == self.PARAM_ARTE_BONUS :
                    params = {"url": url,"download_path": self.DOWNLOADDIR , "Title": video[self.PARAM_VIDEO_NAME]}
                elif self.ARTE_CATEGORIE == self.PARAM_ARTE_LIVE:
		    hd, params = self.liveParser.decode_link(hd)
					
		    params["download_path"] = self.DOWNLOADDIR
		    params["Title"] = video[self.PARAM_VIDEO_NAME]
		    params["use_rtmpdump"] = True
					
                name = "%s.mp4" %(video[self.PARAM_VIDEO_NAME])
                my_downloader.download(name, params, False)
            else:
                print("You must install rtmpdump")
                xbmc.executebuiltin("XBMC.Notification(%s,%s)"%("ERROR downloadVideo ","You must install rtmpdump"))  
			
        except Exception,msg:
            print("Error downloadVideo : %s", msg)
            print_exc()
            item = my_downloader._getNextItemFromQueue()
            if item is not None:
                (item_id, item) = item
                my_downloader._removeItemFromQueue(item_id)
            xbmc.executebuiltin("XBMC.Notification(%s,%s)"%("ERROR downloadVideo ",msg))

        return ok	
